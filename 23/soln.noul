d1a := (\inp ->
    inp then lines map (\l -> l search_all(R"\d")) map (\l -> int(l[0] $ l[-1])) then sum
);

d1b := (\inp -> (
    L := ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine"];
    fpat := R"\d|" $ (L join "|");
    bpat := R".*(\d" $ (L map ("|"$) join "") $ ")";
    inp then lines map (\l -> (
        front := l search fpat;
        back := (l search bpat) !! 1;
        l = (front .. back) map (\i-> if (i =~ R"\d") i else $((L locate i) + 1)) join "";
        int(l)
    )) then sum
));

d2p := (\inp -> (
    col_color := (\c, g -> g map (\s -> (s !? c) coalesce 0) then max);
    inp then lines
    map (\l ->
        l[5:] split ": "
        then (int *** (\g ->
            g split "; " map (\s ->
                s split ", " map (\c ->
                    c split " " then (int *** id) then reverse) then dict)
            then ("red"(col_color) &&& "green"(col_color) &&& "blue"(col_color)) )))
));

d2a := (\inp -> d2p(inp) filter (\p -> all(p[1] zip (12 to 14) with (<))) map first then sum);
d2b := (\inp -> d2p(inp) map (\p -> product(p[1])) then sum);

d3p := (\inp, cond -> (
    ls := lines(inp);
    li := (\l -> (
        infs := [];
        o := 0;
        while (1) (
            n := l search R"\d+";
            if (n == null) return infs;
            i := l locate n;
            infs +.= [int(n), i + o, i + o + len(n)];
            l = l[i + len(n):];
            o = i + len(n) + o;
        );
    ));
    lis := enumerate(ls) map (\[i, l] -> li(l) map (\inf -> [inf[0], i, inf[1], inf[2]])) then flatten;
    sli := (\l -> enumerate(list(l)) filter (\p -> cond(p[1])));
    slis := ls map sli then enumerate map (\[i, infs] -> infs map (\[j, s] -> [i, j])) then flatten;
    [ls, lis, slis]
));

d3a := (\inp -> (
    ls, lis, slis := d3p(inp, (\c -> c != '.' and (c < '0' or c > '9')));
    sis := slis map (\c -> [-1, 0, 1] ^^ 2 map (\o -> vector(c) + vector(o))) then flatten;
    lis filter (\linf -> sis any (\c -> c[0] == linf[1] and linf[2] <= c[1] < linf[3])) map first then sum
));

d3b := (\inp -> (
    ls, lis, slis := d3p(inp, (== '*'));
    slis map (\sl -> (
        [-1, 0, 1] ^^ 2 map (\o -> vector(sl) + vector(o)) map (\c -> lis filter (\linf -> c[0] == linf[1] and linf[2] <= c[1] < linf[3])) then flatten then set
    ))
    filter (\i -> len(i) == 2) then map (\ns -> ns map first then product) then sum
));

d4p := (\inp -> (
    lines(inp) map (\l -> l split ": " then second then (\s -> s split " | " map (\g -> g search_all R"\d+" then set) fold &&))
));
d4a := (\inp -> d4p(inp) map (\l -> floor(2 ^ (len(l) - 1))) then sum);
d4b := (\inp -> (
    cis := enumerate(d4p(inp)) map (\[i, l] -> 1 to len(l) map (+i));
    mult := cis map (const 1);
    for (i, ci <<- cis) for (j <- ci) mult[j] += mult[i];
    sum(mult)
));

d5p := (\inp -> (
    ps := inp split "\n\n";
    seeds := ps[0] split ": " then second split " " map int;
    maps := ps[1:] map (\m -> lines(m)[1:] map (\l -> l split " " map int));
    [seeds, maps]
));
d5a := (\inp -> (
    seeds, maps := d5p(inp);
    for (m <- maps) (
        seeds = seeds map (\s -> (
            for ([t, b, l] <- m) if (b <= s < (b + l)) return s - b + t;
            s
        ));
    );
    min(seeds)
));
d5b := (\inp -> (
    seeds, maps := d5p(inp);
    maps fold (\ss, m -> (
        ss map (\ir -> (
            m fold (\[rest, next], [t, b, l] -> (
                new_rest, new_next := rest map (\[s, sl] -> 
                    if ((s + sl) <= b or s >= (b + l)) (
                        [[[s, sl]], []]
                    ) else (
                        ins, ine := max(s, b), min(s + sl, b + l);
                        ((if (s < b) [[s, b - s]] else []) ++
                            (if ((s + sl) > (b + l)) [[b + l, s + sl - b - l]] else [])) ..
                        [[ins - b + t, ine - ins]]
                    )
                ) then transpose map flatten or [[], []];
                [new_rest, next ++ new_next]
            )) from [[ir], []] fold ++
        )) then flatten
    )) from (seeds group 2) map first then min
));

d6a := (\inp ->
    lines(inp) map (\l -> l search_all(R"\d+") map int) then transpose
    map (\[t, dist] -> (1 til t) map (\i -> i * (t - i) > dist) then sum) then product
);
# (time - x) * x > dist
# => time * x - x^2 > dist
# => x^2 - time * x + dist < 0
# get roots: (-time +- sqrt(time^2 - 4 * dist)) / 2
d6b := (\inp -> (
    tim, dist := lines(inp) map (\l -> l split ": " then second replace R"\s+" with "" then int);
    ((V(-1, 1) * sqrt(tim ^ 2 - 4 * dist) - tim) / 2 fold - then abs then floor) + 1
));

d7_rank := (\proc, order -> \[card, b] -> (
    v := proc(frequencies(card));
    [-(len(v)), v[-1]] ++ (card map (order locate _))
));
d7s := (\order, proc -> \inp -> (
    cards := lines(inp) map (\l -> l split(" ") then (id *** int));
    cards sort (<=> on d7_rank(proc, order)) then enumerate map (\[i, [c, b]] -> (i + 1) * b) then sum
));
d7a := d7s("23456789TJQKA", \freq -> sort(values(freq)));
d7b := d7s("J23456789TQKA", \freq -> (
    v := sort(values(freq -. "J"));
    if (len(v) == 0) [5] else v[:-1] +. (v[-1] + freq["J"])
));

d8p := (\inp -> (
    ls := lines(inp);
    insts := ls[0];
    net := ls[2:] map (_ replace "[()]" with "" split " = " then (id *** (_ split ", "))) then dict;
    [insts, net]
));
d8a := (\inp -> (
    insts, net := d8p(inp);
    node := "AAA";
    for (i, inst <<- cycle(insts)) (
        node = net[node][inst == "R"];
        if (node == "ZZZ") return i + 1;
    )
));
d8b := (\inp -> (
    insts, net := d8p(inp);
    steps := (\node -> (
        for (i, inst <<- cycle(insts)) (
            node = net[node][inst == "R"];
            if (node ends_with "Z") return i + 1;
        )
    ));
    nodes := keys(net) filter (_ ends_with "A");
    nodes map steps fold lcm
));

d9p := (\inp ->
    lines(inp) map (\l -> l split " " map int)
    map (\seq -> (
        preds := [seq];
        while (1) (
            preds +.= preds[-1] pairwise flip(-);
            if (preds[-1] all (==0)) return preds;
        )
    ))
);
d9a := (\inp -> d9p(inp) map (\preds -> preds map last then sum) then sum);
d9b := (\inp -> d9p(inp) map (\preds -> preds map first then reverse fold (\s, i -> i - s)) then sum);

d10_off_dirs := [V(0, 1), V(-1, 0), V(0, -1), V(1, 0)];
d10_net_get := (\net, [r, c] -> (net !? r coalesce return) !? c);
d10p := (\inp -> (
    net := lines(inp) map (_ map (\c ->
        switch (c)
        case "F" -> {0, 3}
        case "J" -> {1, 2}
        case "|" -> {1, 3}
        case "-" -> {0, 2}
        case "7" -> {2, 3}
        case "L" -> {0, 1}
        case _ -> null
    ));
    start := enumerate(lines(inp)) find (\[i, l] -> (l locate? "S") != null) then (id *** (_ locate "S")) then vector;
    start_dirs := enumerate(d10_off_dirs) filter (\[cur_dir, off] -> (
        next := d10_net_get(net, start + off);
        (next != null and ((cur_dir + 2) % 4) in next)
    )) map first;
    net[start[0]][start[1]] = start_dirs then set;
    [net, start, start_dirs[0]]
));
d10a := (\inp -> (
    net, start, cur_dir := d10p(inp);
    cur := start;
    for (peri <- iota(1)) (
        cur += d10_off_dirs[cur_dir];
        cur_dir = only(list(d10_net_get(net, cur) -. ((cur_dir + 2) % 4)));
        if (cur == start) return peri / 2;
    );
));
d10b := (\inp -> (
    net, start, cur_dir := d10p(inp);
    cur, area := start, 0;
    for (peri <- iota(1)) (
        cur += d10_off_dirs[cur_dir];
        area += (cur_dir - 1) % 2 * cur[0];
        cur_dir = only(list(d10_net_get(net, cur) -. ((cur_dir + 2) % 4)));
        if (cur == start) return abs(area) + 1 - peri / 2;
    );
));

d11p := (\inp -> (
    mmap := lines(inp) map (\l -> l map (=="#"));
    empty_rows := enumerate(mmap) filter (\[i, l] -> l all (== 0)) map first;
    empty_cols := enumerate(transpose(mmap)) filter (\[i, l] -> l all (== 0)) map first;
    [mmap, empty_rows, empty_cols]
));
d11_find_locs := (\mmap -> 
    enumerate(mmap) filter (\[r, l] -> l any (== 1)) map (\[r, l] -> (
        enumerate(l) filter second map (\[c, p] -> V(r, c))
    )) then flatten
);
d11a := (\inp -> (
    mmap, empty_rows, empty_cols := d11p(inp);
    for (r <- reverse(empty_rows)) mmap = mmap[:r] ++ (mmap[r] .* 2) ++ mmap[r + 1:];
    for (c <- reverse(empty_cols)) mmap = mmap map (\l -> l[:c] ++ (l[c] .* 2) ++ l[c + 1:]);
    locs := d11_find_locs(mmap);
    combinations(locs, 2) then map (\[a, b] -> sum(abs(a - b))) then sum
));
d11b := (\inp -> (
    mmap, empty_rows, empty_cols := d11p(inp);
    empty_rows .= set;
    empty_cols .= set;
    locs := d11_find_locs(mmap);
    dist := (\a, b -> (
        mmrow := sort([a[0], b[0]]);
        mmcol := sort([a[1], b[1]]);
        erows := len(empty_rows && set((mmrow[0] + 1) til mmrow[1]));
        ecols := len(empty_cols && set((mmcol[0] + 1) til mmcol[1]));
        sum(abs(a - b)) + (erows + ecols) * 999999
    ));
    combinations(locs, 2) map (\p -> dist(...p)) then sum
));

d12p := (\inp ->
    lines(inp) map (_ split " " then (_ map ("#?." locate _)) *** (_ split "," map int))
);
d12s := (\recs -> (
    recs map (\[spots, counts] -> (
        dp := counts map const(spots map const(0));
        for (start <- 0 til (len(spots) - counts[0])) (
            if (spots[start:start + counts[0]] all (!= 2)) dp[0][start + counts[0] - 1] = 1;
            if (spots[start] == 0) break;
        );
        for (i, c <<- counts[1:]) (
            i += 1;
            last_start :=
                if (i < (len(counts) - 1)) 0
                else (
                    ((len(spots) - 1) to 0 by (-1) find? (\j -> spots[j] == 0) coalesce (c - 1)) - c + 1
                );
            acc := 0;
            for (j <- (len(spots) - 1) to last_start by (-1)) (
                acc = if (spots[j] != 2) acc + 1 else 0;
                if (acc >= c and (j == 0 or spots[j - 1] != 0)) (
                    prev_start := (j - 2) to 0 by (-1) find? (\k -> spots[k] == 0) coalesce 0;
                    prev := prev_start til (j - 1) map (\k -> dp[i - 1][k]) then sum;
                    if (prev > 0) (
                        dp[i][j + c - 1] = prev;
                    )
                )
            )
        );
        sum(dp[-1])
    )) then sum
));
d12a := d12p >>> d12s;
d12b := (\inp -> d12s(d12p(inp) map (\spots -> flatten((spots +. 1) ** 4) ++ spots) *** (_ ** 5)));

d13s := (\find_refl -> \inp -> 
    inp split "\n\n" map (\pat -> (
        m := lines(pat);
        r := find_refl(m);
        if (r != null) r * 100 else find_refl(transpose(m))
    )) then sum
);
d13a := d13s(\m -> 1 til len(m) find? (\r -> all(reverse(m[:r]) zip m[r:] with ==)));
d13b := d13s(\m -> 1 til len(m) find? (\r ->
    sum(reverse(m[:r]) zip m[r:] with (\x, y -> sum(x zip y with !=))) == 1));

d14_roll := (\m -> (
    for (r <- 0 til len(m)) (
        for (c <- 0 til len(m)) (
            if (m[r][c] == "O") (
                last_sol := (r - 1) to 0 by (-1) find? (\r' -> m[r'][c] != ".") coalesce -1;
                if (last_sol != (r - 1)) (
                    m[last_sol + 1][c] = "O";
                    m[r][c] = ".";
                )
            )
        )
    );
    m
));
d14_sup := (\m -> enumerate(reverse(m)) map (\[r, row] -> (row count (== "O")) * (r + 1)) then sum);
d14a := (\inp -> d14_sup(d14_roll(lines(inp))));
d14b := (\inp -> (
    rotate := (\m -> transpose(m) map reverse);
    spin := (\m -> rotate(d14_roll(rotate(d14_roll(rotate(d14_roll(rotate(d14_roll(m)))))))));
    m := lines(inp);
    steps := {};
    for (i <- iota(0)) (
        if (m in steps) (
            period := [1, steps[m]] iterate (+1) *** (steps !!) find (second >>> (m ==)) then first;
            for (j <- 1 to (1000000000 - i) % period) m = spin(m);
            return reverse(m) then enumerate map (\[r, row] -> (row count (== "O")) * (r + 1)) then sum;
        ) else every m, steps[m] = spin(m);
    );
));

d15_hash := (_ fold (\hash, c -> ((hash + ord(c)) * 17) %% 256) from 0);
d15a := (_ split "," map d15_hash then sum);
d15b := (\inp -> (
    boxes := 1 to 256 map const([]);
    inp split "," map (\s -> (
        lab, val := s split_re "[-=]";
        ind := d15_hash(lab);
        if (val) (
            loc := boxes[ind] locate? first >>> (== lab);
            if (loc != null) boxes[ind][loc][1] = val
            else boxes[ind] +.= [lab, val];
        ) else boxes[ind] .= (_ reject first >>> (== lab));
    ));
    enumerate(boxes) flat_map (\[i, slots] -> 
        enumerate(slots) map (\[j, [_, v]] -> (i + 1) * (j + 1) * int(v))
    ) then sum
));

d16_lits := (\b, mirs -> (
    beams, seen := [b], {};
    while (beams) (
        beams flat_map= \[p, d] -> (
            tile := d10_net_get(mirs, p);
            if (tile != null and [p, d] not_in seen) (
                seen |.= [p, d];
                step := \d' -> [p + d10_off_dirs[d'], d'];
                switch (tile)
                case "." -> [step(d)]
                case "|" -> [[1, 3], [d]][d % 2] map step
                case "-" -> [[d], [0, 2]][d % 2] map step
                case "/" -> [step((5 - d) %% 4)]
                case "\\" -> [step((3 - d) %% 4)]
            ) else []
        );
    );
    seen map first then unique then len
));
d16a := (\inp -> d16_lits([V(0, 0), 0], lines(inp)));
d16b := (\inp -> (
    mirs := lines(inp);
    rows, cols := len(mirs), len(mirs[0]);
    (0 til cols map (\c -> [V(0, c), 3]))
    ++ (0 til cols map (\c -> [V(rows - 1, c), 1]))
    ++ (0 til rows map (\r -> [V(r, 0), 0]))
    ++ (0 til rows map (\r -> [V(r, cols - 1), 2])) map (\s -> d16_lits(s, mirs)) then max
));

d17s := (\get_dirs, get_soln -> \inp -> (
    m := lines(inp) map (_ map int);
    rows, cols := len(m), len(m[0]);
    costss := 1 to rows map const(1 to cols map const([]));
    costss[0][0] = [[0, 0, 0]];
    viss := [V(0, 0)];
    while (viss) (
        new_viss := {};
        viss each (\[r, c] -> (
            for ([cost, dir, streak] <- costss[r][c]) (
                for (nd <- get_dirs(dir, streak)) (
                    r', c' := V(r, c) + d10_off_dirs[nd];
                    npos := V(r', c');
                    if (0 <= r' < rows and 0 <= c' < cols) (
                        ncost, nstreak := cost + m[r'][c'], if (nd == dir) streak + 1 else 1;
                        if (not(costss[r'][c'])) (
                            costss[r'][c'] = [[ncost, nd, nstreak]];
                            new_viss |.= npos;
                        ) else (
                            same, diff := costss[r'][c'] partition (_[1:]) >>> (== ([nd, nstreak]));
                            same map= first;
                            old := if (same == []) 1000000000 else min(same);
                            same_least := min(same +. ncost);
                            if (same_least < old) (
                                new_viss |.= npos;
                            );
                            costss[r'][c'] = diff +. [same_least, nd, nstreak];
                        );
                    )
                )
            )
        ));
        viss = new_viss;
    );
    get_soln(costss[rows - 1][cols - 1])
));
d17a := d17s((\dir, streak -> (if (streak < 3) [dir] else []) ++ [(dir - 1) %% 4, (dir + 1) %% 4]),
            (_ map first then min));
d17b := d17s((\dir, streak -> (if (streak < 10) [dir] else []) ++ (if (streak >= 4) [(dir - 1) %% 4, (dir + 1) %% 4] else [])),
            (_ filter third >>> (>= 4) map first then min));

d18s := (\insts -> (
    (insts fold (\[pos, area], [dir, dist] -> [
        pos + d10_off_dirs[dir] * dist,
        area + (dir - 1) % 2 * pos[0] * dist
    ]) from [V(0, 0), 1] then second then abs)
    + (insts map second then sum) / 2
));
d18a := \inp -> d18s(lines(inp) map (_ split " " then _[:2] then ("RULD" locate _) *** int));
d18b := \inp -> d18s(lines(inp) map (_ replace R"^.*\(#" with "" replace R"\)$" with ""
    then (\n -> [(4 - int(n[5])) %% 4, eval("0x" $ n[:5])])));

d19p := (\inp -> (
    wfs, parts := inp split "\n\n";
    wfs = lines(wfs) map (_ replace R"\}$" with "" split "{" then id *** (_ split "," map (\i -> if (":" in i) i split ":" else i))) then dict;
    parts = lines(parts) map (_ search_all R"\d+" map int);
    [wfs, parts]
));
d19a := (\inp -> (
    wfs, parts := d19p(inp);
    score := 0;
    for (part <- parts) (
        wf := "in";
        while (wf not_in "A" .. "R") (
            for (cond <- wfs[wf]) (
                if (type(cond) == str) (
                    wf = cond;
                    break;
                ) else (
                    s, target := cond;
                    for (i <- 0 til 4) s = s replace ("xmas"[i]) with ($(part[i]));
                    if (eval(s)) (
                        wf = target;
                        break;
                    );
                )
            );
        );
        if (wf == "A") score += sum(part);
    );
    score
));
d19b := (\inp -> (
    wfs, _ := d19p(inp);
    sets := [["in", [[1, 4001]] .* 4]];
    total := 0;
    while (sets) (
        new_sets := [];
        sets each (\[wf, parts] -> (
            if (wf == "A") total += parts map (_ map (\[s, e] -> e - s) then sum) then product
            else if (wf != "R") (
                for (branch <- wfs[wf]) (
                    if (type(branch) == str) new_sets +.= [branch, parts]
                    else (
                        cond, target := branch;
                        var, ineq, val := cond[0], cond[1], int(cond[2:]);
                        if (ineq == ">") val += 1;
                        ind := "xmas" locate var;
                        partitions := [] .. [];
                        for ([s, e] <- parts[ind]) (
                            if (e <= val) partitions[0] +.= [s, e]
                            else if (s >= val) partitions[1] +.= [s, e]
                            else partitions = partitions zip [s, val] .. [val, e] with +.;
                        );
                        partitions = partitions map (\p -> parts[:ind] ++ [p] ++ parts[ind + 1:]);
                        new_sets +.= [target, partitions[ineq == ">"]];
                        parts = partitions[ineq == "<"];
                    );
                );
            );
        ));
        sets = new_sets;
    );
    total
));

d20p := (\inp -> (
    sys := lines(inp) map (_ split " -> " then (\def -> [def[0], def[1:]]) *** (_ split ", "));
    defs := sys map (\[[ty, nam], outs] -> [nam, [ty, outs]]) then dict;
    oimap := sys flat_map (\[[ty, nam], outs] -> outs map (nam .. _)) group_all second map (\g -> [g[0][1], g map first]) then dict;
    mem := sys map (\[[ty, nam], outs] ->
        [nam, 
        switch (ty) 
        case "b" -> null
        case "%" -> 0
        case "&" -> oimap[nam] map (.. 0) then dict
        ]
    ) then dict;
    [defs, mem, oimap]
));
d20a := (\inp -> (
    defs, mem, _ := d20p(inp);
    total := V(0, 0);
    for (i <- 0 til 1000) (
        evs := [["", "roadcaster", 0]];
        counts := V(0, 0);
        orig := mem;
        while (evs) (
            new_evs := [];
            for ([frm, nam, pulse] <- evs) (
                counts[pulse] += 1;
                ty, outs := defs !? nam coalesce continue;
                switch (ty)
                case "b" -> (new_evs ++= outs map [nam, _, pulse])
                case "%" -> if (not pulse) (
                    mem[nam] .= not;
                    new_evs ++= outs map [nam, _, mem[nam]];
                )
                case "&" -> (
                    mem[nam][frm] = pulse;
                    res := not(all(values(mem[nam])));
                    new_evs ++= outs map [nam, _, res];
                )
            );
            evs = new_evs;
        );
        total += counts;
    );
    total[0] * total[1]
));
d20b := (\inp -> (
    defs, mem, oimap := d20p(inp);
    fin_ins := keys(mem[oimap["rx"][0]]);
    counts := {};
    for (i <- iota(1)) (
        evs := [["", "roadcaster", 0]];
        while (evs) (
            new_evs := [];
            for ([frm, nam, pulse] <- evs) (
                if (frm in fin_ins and pulse) (
                    if (frm not_in counts) counts[frm] = i;
                    if (fin_ins all (in counts)) return values(counts) fold lcm;
                );
                ty, outs := defs !? nam coalesce continue;
                switch (ty)
                case "b" -> (new_evs ++= outs map [nam, _, pulse])
                case "%" -> if (not pulse) (
                    mem[nam] .= not;
                    new_evs ++= outs map [nam, _, mem[nam]];
                )
                case "&" -> (
                    mem[nam][frm] = pulse;
                    res := not(all(values(mem[nam])));
                    new_evs ++= outs map [nam, _, res];
                )
            );
            evs = new_evs;
        );
    );
));

d21a := (\inp -> (
    m := lines(inp);
    rows := len(m);
    steped := m;
    mid := rows // 2;
    steped[mid][mid] = "O";
    for (i <- 1 to 64) (
        new_steped := m;
        for ([p, _] <- enumerate(steped) flat_map (\[r, l] -> enumerate(l) map (\[c, t] -> [V(r, c), t])) filter second >>> (== "O")) (
            for (o <- d10_off_dirs) (
                np := p + o;
                if (0 <= np[0] < rows and 0 <= np[1] < rows and m[np[0]][np[1]] != "#") (
                    new_steped[np[0]][np[1]] = "O";
                )
            );
        );
        steped = new_steped;
    );
    sum(steped map (_ count (== "O")))
));
d21b := (\inp -> (
    m := lines(inp);
    rows := len(m);
    m = (m map (_ $* 3)) ** 3;
    steps := 26501365;
    steped := m;
    mid := rows // 2;
    steped[mid + rows][mid + rows] = "O";
    nine := 0;
    countss := [];
    for (i <- iota(0)) (
        new_steped := m;
        for ([p, _] <- enumerate(steped) flat_map (\[r, l] -> enumerate(l) filter second >>> (== "O") map (\[c, t] -> [V(r, c), t]))) (
            for (o <- d10_off_dirs) (
                np := p + o;
                if (0 <= np[0] < rows * 3 and 0 <= np[1] < rows * 3 and m[np[0]][np[1]] != "#") (
                    new_steped[np[0]][np[1]] = "O";
                )
            );
        );
        steped = new_steped;
        counts := 0 til 3 map (\r -> (
            0 til 3 map (\c -> (
                r * rows til (r + 1) * rows map (\r' -> (c * rows til (c + 1) * rows) count (\c' -> steped[r'][c'] == "O")) then sum
            ))
        ));
        countss +.= counts;
        if (i % 2 == steps % 2) (
            new := sum(flatten(countss[-1]));
            if (new == nine) break;
            nine = new;
            print(nine);
        );
    );
    json_encode(countss) write_file "countss.json";
    mul := floor((steps - mid) // rows) - 1;
    mids := (mul * 2 + 1) + mul * 2 * mul;
    mids *= countss[-1][1][1];
    rest := enumerate(d10_off_dirs) map (\[o, off] -> (
        tip_off := steps - rows * (mul + 1);
        home_off := steps - rows * mul;
        sc_off := steps - rows * mul;
        bc_off := steps - rows * (mul - 1);
        [[1, tip_off, V(1, 1) + off],
        [1, home_off, V(1, 1) + off],
        [mul, sc_off, V(1, 1) + off + d10_off_dirs !% (o + 1)],
        [(mul + 1), bc_off, V(1, 1) + off + d10_off_dirs !% (o + 1)]]
        map (\[mul', off', inds] -> (
            print(mul', off', inds);
            mul' * countss[off'][inds[0]][inds[1]]
        )) then sum
    )) then sum;
    rest + mids
));

d22_sim := (\bs, dims, rem -> (
    bs = bs sort (<=> on (\b -> max(b map third)));
    hmap := dims[0] *. (dims[1] *. 0);
    res := enumerate(bs) reject first >>> (== rem) map (\[_, [ss, es]] -> (
        xy := (ss[0] to es[0]) ** (ss[1] to es[1]);
        minh := (xy map (\[x, y] -> hmap[x][y]) then max) + 1;
        maxh := minh + es[2] - ss[2];
        falls := minh != ss[2];
        (if (falls) (
            xy each (\[x, y] -> (hmap[x][y] = maxh));
            [ss[:2] +. minh, es[:2] +. maxh]
        ) else (
            [ss, es]
        )) .. falls
    ));
    transpose(res) then id *** sum
));
d22p := (\inp -> (
    bs := lines(inp) map (_ split "~" map (_ split "," map int));
    dims := transpose(flatten(bs)) map max >>> (+1);
    [first(d22_sim(bs, dims, null)), dims]
));
d22a := (\inp -> (
    fall, dims := d22p(inp);
    0 til len(fall) count \i -> second(d22_sim(fall, dims, i)) == 0
));
d22b := (\inp -> (
    fall, dims := d22p(inp);
    0 til len(fall) sum \i -> second(d22_sim(fall, dims, i))
));

d23a := (\inp -> (
    m := lines(inp);
    visited := m map (_ map const(0));
    edges := [V(1, 1)];
    last_row := len(m) - 1;
    visited[0][1] = 1;
    expl := (\p, vis, dist -> (
        while (1) (
            vis[p[0]][p[1]] = 1;
            dist += 1;
            if (p[0] == last_row) return dist;
            nexts := [];
            dir := ">^<v" locate? d10_net_get(m, p);
            if (dir != null) (
                n := p + d10_off_dirs[dir];
                if (not(d10_net_get(vis, n))) nexts +.= n;
            ) else (
                for (o, off <<- d10_off_dirs) (
                    next := p + off;
                    tile := d10_net_get(m, next);
                    if (tile != null and tile != "#" and not(d10_net_get(vis, next))) nexts +.= next;
                );
            );
            if (len(nexts) > 1) return max(nexts par_map (\next' -> expl(next', vis, dist)));
            if (not(nexts)) return 0;
            p = nexts[0];
        );
    ));
    expl(V(1, 1), visited, 0)
));
d23b := (\inp -> (
    m := lines(inp);
    heads := [[V(1, 1), V(0, 1)]];
    last_row := len(m) - 1;
    edges, visited := [], {};
    while (heads) (
        pos, prev := pop heads;
        head, dist := prev, 1;
        while (1) (
            if (pos[0] == last_row) (
                edges +.= [head, pos, dist];
                break;
            );
            nexts := d10_off_dirs map (+pos) filter (\p -> p != prev and null != d10_net_get(m, p) != "#");
            if (len(nexts) > 1) (
                if (pos not_in visited) (
                    heads ++= nexts map (.. pos);
                    visited |.= pos;
                );
                edges +.= [head, pos, dist - 1];
                break;
            ) else (
                prev = pos;
                pos = nexts[0];
                dist += 1;
            )
        );
    );
    adjs := (edges map uncons) ++ (edges map (\e -> [e[1], [e[0], e[2]]])) group_all first map (\g -> [g[0][0], unique(g map second)]) then dict;
    expl := (\pos, vis, dist -> (
        dists := adjs[pos] reject first >>> (in vis) par_map (\[p, d] -> expl(p, vis +. pos, dist + 1 + d));
        if (dists) max(dists) else if (pos[0] == last_row) dist else 0
    ));
    first_edge := adjs[V(0, 1)][0];
    expl(first_edge[0], [], first_edge[1])
));

d24a := (\inp -> (
    stones := lines(inp) map (_ split_re " @ +" map (_ split_re ", +" map int));
    collide := (\va, a, vb, b -> (
        ma, mb := va[1] / va[0], vb[1] / vb[0];
        oa, ob := a[1] - a[0] * ma, b[1] - b[0] * mb;
        x := (ob - oa) / (ma - mb);
        y := ma * x + oa;
        p := V(x, y);
        flatten([list((p - a) / va), list((p - b) / vb)]) all (>= 0) and 
        [x, y] all (200000000000000 <= _ <= 400000000000000)
        # [x, y] all (7 <= _ <= 27)
    ));
    stones map (\[p, v] -> [vector(p[:2]), vector(v[:2])]) combinations 2 count (\[[a, va], [b, vb]] -> collide(va, a, vb, b))
));
d24b := (\inp -> (
    stones := lines(inp) map (_ split_re " @ +" map (_ split_re ", +" map int));
    eqs := enumerate(stones) map (\[i, [p, v]] -> (
        enumerate(p) zip v with (\[j, p'], v' -> F"{v'} * t{i} + {p'} == v{'xyz'[j]} * t{i} + {'xyz'[j]}, ") join ""
    )) join "\n";
    def_ints := (\idents -> (idents join ", ") $ ' = Ints("' $ (idents join " ") $ '")\n');

    "from z3 import *\n"
    $ def_ints("xyz" flat_map (\i -> [i, "v" $ i]))
    $ def_ints(0 til len(stones) map (\i -> "t" $ i))
    $ "s = Solver()\ns.add(\n" $ eqs $ ")\ns.check()\nprint(s.model().eval(x + y + z))"
    write_file "d24.py";
    trim(utf8_decode(run_process("python3", ["d24.py"])))
));
