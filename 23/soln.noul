d1a := (\inp ->
    inp then lines map (\l -> l search_all(R"\d")) map (\l -> int(l[0] $ l[-1])) then sum
);

d1b := (\inp -> (
    L := ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine"];
    fpat := R"\d|" $ (L join "|");
    bpat := R".*(\d" $ (L map ("|"$) join "") $ ")";
    inp then lines map (\l -> (
        front := l search fpat;
        back := (l search bpat) !! 1;
        l = (front .. back) map (\i-> if (i =~ R"\d") i else $((L locate i) + 1)) join "";
        int(l)
    )) then sum
));

d2p := (\inp -> (
    col_color := (\c, g -> g map (\s -> (s !? c) coalesce 0) then max);
    inp then lines
    map (\l ->
        l[5:] split ": "
        then (int *** (\g ->
            g split "; " map (\s ->
                s split ", " map (\c ->
                    c split " " then (int *** id) then reverse) then dict)
            then ("red"(col_color) &&& "green"(col_color) &&& "blue"(col_color)) )))
));

d2a := (\inp -> d2p(inp) filter (\p -> all(p[1] zip (12 to 14) with (<))) map first then sum);
d2b := (\inp -> d2p(inp) map (\p -> product(p[1])) then sum);

d3p := (\inp, cond -> (
    ls := lines(inp);
    li := (\l -> (
        infs := [];
        o := 0;
        while (1) (
            n := l search R"\d+";
            if (n == null) return infs;
            i := l locate n;
            infs +.= [int(n), i + o, i + o + len(n)];
            l = l[i + len(n):];
            o = i + len(n) + o;
        );
    ));
    lis := enumerate(ls) map (\[i, l] -> li(l) map (\inf -> [inf[0], i, inf[1], inf[2]])) then flatten;
    sli := (\l -> enumerate(list(l)) filter (\p -> cond(p[1])));
    slis := ls map sli then enumerate map (\[i, infs] -> infs map (\[j, s] -> [i, j])) then flatten;
    [ls, lis, slis]
));

d3a := (\inp -> (
    ls, lis, slis := d3p(inp, (\c -> c != '.' and (c < '0' or c > '9')));
    sis := slis map (\c -> [-1, 0, 1] ^^ 2 map (\o -> vector(c) + vector(o))) then flatten;
    lis filter (\linf -> sis any (\c -> c[0] == linf[1] and linf[2] <= c[1] < linf[3])) map first then sum
));

d3b := (\inp -> (
    ls, lis, slis := d3p(inp, (== '*'));
    slis map (\sl -> (
        [-1, 0, 1] ^^ 2 map (\o -> vector(sl) + vector(o)) map (\c -> lis filter (\linf -> c[0] == linf[1] and linf[2] <= c[1] < linf[3])) then flatten then set
    ))
    filter (\i -> len(i) == 2) then map (\ns -> ns map first then product) then sum
));

d4p := (\inp -> (
    lines(inp) map (\l -> l split ": " then second then (\s -> s split " | " map (\g -> g search_all R"\d+" then set) fold &&))
));
d4a := (\inp -> d4p(inp) map (\l -> floor(2 ^ (len(l) - 1))) then sum);
d4b := (\inp -> (
    cis := enumerate(d4p(inp)) map (\[i, l] -> 1 to len(l) map (+i));
    mult := cis map (const 1);
    for (i, ci <<- cis) for (j <- ci) mult[j] += mult[i];
    sum(mult)
));

d5p := (\inp -> (
    ps := inp split "\n\n";
    seeds := ps[0] split ": " then second split " " map int;
    maps := ps[1:] map (\m -> lines(m)[1:] map (\l -> l split " " map int));
    [seeds, maps]
));
d5a := (\inp -> (
    seeds, maps := d5p(inp);
    for (m <- maps) (
        seeds = seeds map (\s -> (
            for ([t, b, l] <- m) if (b <= s < (b + l)) return s - b + t;
            s
        ));
    );
    min(seeds)
));
d5b := (\inp -> (
    seeds, maps := d5p(inp);
    maps fold (\ss, m -> (
        ss map (\ir -> (
            m fold (\[rest, next], [t, b, l] -> (
                new_rest, new_next := rest map (\[s, sl] -> 
                    if ((s + sl) <= b or s >= (b + l)) (
                        [[[s, sl]], []]
                    ) else (
                        ins, ine := max(s, b), min(s + sl, b + l);
                        ((if (s < b) [[s, b - s]] else []) ++
                            (if ((s + sl) > (b + l)) [[b + l, s + sl - b - l]] else [])) ..
                        [[ins - b + t, ine - ins]]
                    )
                ) then transpose map flatten or [[], []];
                [new_rest, next ++ new_next]
            )) from [[ir], []] fold ++
        )) then flatten
    )) from (seeds group 2) map first then min
));

d6a := (\inp ->
    lines(inp) map (\l -> l search_all(R"\d+") map int) then transpose
    map (\[t, dist] -> (1 til t) map (\i -> i * (t - i) > dist) then sum) then product
);
# (time - x) * x > dist
# => time * x - x^2 > dist
# => x^2 - time * x + dist < 0
# get roots: (-time +- sqrt(time^2 - 4 * dist)) / 2
d6b := (\inp -> (
    tim, dist := lines(inp) map (\l -> l split ": " then second replace R"\s+" with "" then int);
    ((V(-1, 1) * sqrt(tim ^ 2 - 4 * dist) - tim) / 2 fold - then abs then floor) + 1
));

d7a := (\inp -> (
    order := "23456789TJQKA";
    cards := lines(inp) map (\l -> l split(" ") then (id *** int));
    rank := (\[card, b] -> (
        v := sort(values(frequencies(card)));
        typ := if (v == [5]) 6
        else if (v == [1, 4]) 5
        else if (v == [2, 3]) 4
        else if (v == [1, 1, 3]) 3
        else if (v == [1, 2, 2]) 2
        else if (v == [1, 1, 1, 2]) 1
        else 0;
        vals := card map (order locate _);
        typ .+ vals
    ));
    cards sort (<=> on rank) then enumerate map (\[i, [c, b]] -> (i + 1) * b) then sum
));
d7b := (\inp -> (
    order := "J23456789TQKA";
    cards := lines(inp) map (\l -> l split(" ") then (id *** int));
    rank := (\[card, b] -> (
        freq := frequencies(card);
        v := sort(values(freq -. "J"));
        if (len(v) == 0) (
            v = [5];
        ) else (
            v[-1] += freq["J"];
        );
        typ := if (v == [5]) 6
        else if (v == [1, 4]) 5
        else if (v == [2, 3]) 4
        else if (v == [1, 1, 3]) 3
        else if (v == [1, 2, 2]) 2
        else if (v == [1, 1, 1, 2]) 1
        else 0;
        vals := card map (order locate _);
        res := typ .+ vals;
        res
    ));
    cards sort (<=> on rank) then enumerate map (\[i, [c, b]] -> (i + 1) * b) then sum
));
